/*
 * dabih-api
 *
 * Dabih API Server
 *
 * The version of the OpenAPI document: 2.0.8
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UploadStartBody {
    /// The name of the file to upload
    #[serde(rename = "fileName")]
    pub file_name: String,
    /// mnemonics are human readable unique identifiers for datasets mnemonics have the form <random adjective>_<random first name>
    #[serde(rename = "directory", skip_serializing_if = "Option::is_none")]
    pub directory: Option<String>,
    /// The original path of the file
    #[serde(rename = "filePath", skip_serializing_if = "Option::is_none")]
    pub file_path: Option<String>,
    /// The size of the file in bytes
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<i32>,
    /// A custom searchable tag for the file
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

impl UploadStartBody {
    pub fn new(file_name: String) -> UploadStartBody {
        UploadStartBody {
            file_name,
            directory: None,
            file_path: None,
            size: None,
            tag: None,
        }
    }
}

