/*
 * dabih-api
 *
 * Dabih API Server
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MoveInodeBody {
    /// mnemonics are human readable unique identifiers for datasets mnemonics have the form <random adjective>_<random first name>
    #[serde(rename = "mnemonic")]
    pub mnemonic: String,
    /// Optional: The mnemonic of the new parent directory
    #[serde(rename = "parent", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub parent: Option<Option<String>>,
    /// The list of AES-256 keys required to decrypt all child datasets
    #[serde(rename = "keys", skip_serializing_if = "Option::is_none")]
    pub keys: Option<Vec<models::FileDecryptionKey>>,
    /// Optional: The new name of the inode
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Optional: The new tag of the inode
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

impl MoveInodeBody {
    pub fn new(mnemonic: String) -> MoveInodeBody {
        MoveInodeBody {
            mnemonic,
            parent: None,
            keys: None,
            name: None,
            tag: None,
        }
    }
}

