/*
 * dabih-api
 *
 * Dabih API Server
 *
 * The version of the OpenAPI document: 2.1.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InodeTree {
    /// The database id of the inode
    #[serde(rename = "id")]
    pub id: String,
    /// mnemonics are human readable unique identifiers for datasets mnemonics have the form <random adjective>_<random first name>
    #[serde(rename = "mnemonic")]
    pub mnemonic: String,
    /// The type of the inode
    #[serde(rename = "type")]
    pub r#type: u32,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "tag", deserialize_with = "Option::deserialize")]
    pub tag: Option<String>,
    /// The database id file data if the inode is a file
    #[serde(rename = "dataId")]
    pub data_id: String,
    #[serde(rename = "data", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub data: Option<Option<Box<models::FileData>>>,
    #[serde(rename = "parentId", deserialize_with = "Option::deserialize")]
    pub parent_id: Option<serde_json::Value>,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    #[serde(rename = "members")]
    pub members: Vec<models::Member>,
    #[serde(rename = "keys")]
    pub keys: Vec<models::Key>,
    #[serde(rename = "children", skip_serializing_if = "Option::is_none")]
    pub children: Option<Vec<models::InodeTree>>,
}

impl InodeTree {
    pub fn new(id: String, mnemonic: String, r#type: u32, name: String, tag: Option<String>, data_id: String, parent_id: Option<serde_json::Value>, created_at: String, updated_at: String, members: Vec<models::Member>, keys: Vec<models::Key>) -> InodeTree {
        InodeTree {
            id,
            mnemonic,
            r#type,
            name,
            tag,
            data_id,
            data: None,
            parent_id,
            created_at,
            updated_at,
            members,
            keys,
            children: None,
        }
    }
}

