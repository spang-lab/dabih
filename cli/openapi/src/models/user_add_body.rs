/*
 * dabih-api
 *
 * Dabih API Server
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserAddBody {
    /// The unique user sub if undefined the sub from the auth token will be used
    #[serde(rename = "sub", skip_serializing_if = "Option::is_none")]
    pub sub: Option<String>,
    /// The email of the user
    #[serde(rename = "email")]
    pub email: String,
    #[serde(rename = "key")]
    pub key: models::CryptoJsonWebKey,
    /// If true the key is a root key, used to decrypt all datasets
    #[serde(rename = "isRootKey", skip_serializing_if = "Option::is_none")]
    pub is_root_key: Option<bool>,
}

impl UserAddBody {
    pub fn new(email: String, key: models::CryptoJsonWebKey) -> UserAddBody {
        UserAddBody {
            sub: None,
            email,
            key,
            is_root_key: None,
        }
    }
}

