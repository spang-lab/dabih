/*
 * dabih-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserResponse {
    /// The database id of the user
    #[serde(rename = "id", deserialize_with = "Option::deserialize")]
    pub id: Option<serde_json::Value>,
    /// The unique user sub
    #[serde(rename = "sub")]
    pub sub: String,
    /// The name of the user
    #[serde(rename = "name")]
    pub name: String,
    /// The email of the user
    #[serde(rename = "email")]
    pub email: String,
    /// The date the user was created
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// The date the user was last updated
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    /// The public keys of the user
    #[serde(rename = "keys")]
    pub keys: Vec<models::PublicKey>,
}

impl UserResponse {
    pub fn new(id: Option<serde_json::Value>, sub: String, name: String, email: String, created_at: String, updated_at: String, keys: Vec<models::PublicKey>) -> UserResponse {
        UserResponse {
            id,
            sub,
            name,
            email,
            created_at,
            updated_at,
            keys,
        }
    }
}

