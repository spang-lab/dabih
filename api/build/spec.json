{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"DabihInfo": {
				"properties": {
					"version": {
						"type": "string"
					},
					"branding": {
						"properties": {
							"organization": {
								"properties": {
									"logo": {
										"type": "string"
									},
									"url": {
										"type": "string"
									},
									"name": {
										"type": "string"
									}
								},
								"required": [
									"logo",
									"url",
									"name"
								],
								"type": "object"
							},
							"department": {
								"properties": {
									"logo": {
										"type": "string"
									},
									"url": {
										"type": "string"
									},
									"name": {
										"type": "string"
									}
								},
								"required": [
									"logo",
									"url",
									"name"
								],
								"type": "object"
							},
							"contact": {
								"properties": {
									"phone": {
										"type": "string"
									},
									"country": {
										"type": "string"
									},
									"state": {
										"type": "string"
									},
									"city": {
										"type": "string"
									},
									"zip": {
										"type": "string"
									},
									"street": {
										"type": "string"
									},
									"email": {
										"type": "string"
									},
									"name": {
										"type": "string"
									}
								},
								"required": [
									"phone",
									"country",
									"state",
									"city",
									"zip",
									"street",
									"email",
									"name"
								],
								"type": "object"
							},
							"admin": {
								"properties": {
									"email": {
										"type": "string"
									},
									"name": {
										"type": "string"
									}
								},
								"required": [
									"email",
									"name"
								],
								"type": "object"
							}
						},
						"required": [
							"organization",
							"department",
							"contact",
							"admin"
						],
						"type": "object"
					}
				},
				"required": [
					"version",
					"branding"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PublicKey": {
				"properties": {
					"id": {
						"description": "The database id of the public key",
						"format": "bigint"
					},
					"userId": {
						"description": "The user id the key belongs to",
						"format": "bigint"
					},
					"hash": {
						"type": "string"
					},
					"data": {
						"type": "string"
					},
					"isRootKey": {
						"type": "boolean"
					},
					"enabled": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"enabledBy": {
						"type": "string",
						"nullable": true
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"id",
					"userId",
					"hash",
					"data",
					"isRootKey",
					"enabled",
					"enabledBy",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserResponse": {
				"properties": {
					"id": {
						"description": "The database id of the user",
						"format": "bigint"
					},
					"sub": {
						"type": "string",
						"description": "The unique user sub"
					},
					"name": {
						"type": "string",
						"description": "The name of the user"
					},
					"email": {
						"type": "string",
						"description": "The email of the user"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"description": "The date the user was created"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "The date the user was last updated"
					},
					"keys": {
						"items": {
							"$ref": "#/components/schemas/PublicKey"
						},
						"type": "array",
						"description": "The public keys of the user"
					}
				},
				"required": [
					"id",
					"sub",
					"name",
					"email",
					"createdAt",
					"updatedAt",
					"keys"
				],
				"type": "object",
				"additionalProperties": false
			},
			"crypto.JsonWebKey": {
				"properties": {
					"crv": {
						"type": "string"
					},
					"d": {
						"type": "string"
					},
					"dp": {
						"type": "string"
					},
					"dq": {
						"type": "string"
					},
					"e": {
						"type": "string"
					},
					"k": {
						"type": "string"
					},
					"kty": {
						"type": "string"
					},
					"n": {
						"type": "string"
					},
					"p": {
						"type": "string"
					},
					"q": {
						"type": "string"
					},
					"qi": {
						"type": "string"
					},
					"x": {
						"type": "string"
					},
					"y": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": {}
			},
			"UserAddBody": {
				"properties": {
					"sub": {
						"type": "string",
						"description": "The unique user sub\nif undefined the sub from the auth token will be used"
					},
					"name": {
						"type": "string",
						"description": "The name of the user"
					},
					"email": {
						"type": "string",
						"description": "The email of the user"
					},
					"key": {
						"$ref": "#/components/schemas/crypto.JsonWebKey",
						"description": "The public key of the user as a JWK"
					},
					"isRootKey": {
						"type": "boolean",
						"description": "If true the key is a root key, used to decrypt all datasets"
					}
				},
				"required": [
					"name",
					"email",
					"key"
				],
				"type": "object",
				"additionalProperties": false
			},
			"KeyAddBody": {
				"properties": {
					"sub": {
						"type": "string",
						"description": "The user the key should belong to"
					},
					"data": {
						"$ref": "#/components/schemas/crypto.JsonWebKey",
						"description": "The public key as a JWK"
					},
					"isRootKey": {
						"type": "boolean",
						"description": "If true the key is a root key, used to decrypt all datasets"
					}
				},
				"required": [
					"sub",
					"data",
					"isRootKey"
				],
				"type": "object",
				"additionalProperties": false
			},
			"KeyEnableBody": {
				"properties": {
					"sub": {
						"type": "string",
						"description": "The user the key belongs to"
					},
					"hash": {
						"type": "string",
						"description": "The hash of the key"
					},
					"enabled": {
						"type": "boolean",
						"description": "The key status to set"
					}
				},
				"required": [
					"sub",
					"hash",
					"enabled"
				],
				"type": "object",
				"additionalProperties": false
			},
			"KeyRemoveBody": {
				"properties": {
					"sub": {
						"type": "string",
						"description": "The user the key belongs to"
					},
					"hash": {
						"type": "string",
						"description": "The hash of the key"
					}
				},
				"required": [
					"sub",
					"hash"
				],
				"type": "object",
				"additionalProperties": false
			},
			"InodeType": {
				"description": "InodeType is used to represent the type of an Inode.\nFILE: a file\nDIRECTORY: a directory\nUPLOAD: a file that is being uploaded\nTRASH: the special directory that holds deleted files\nROOT: the global root directory\nHOME: the user's home directory\nUSERS: the directory that holds all user directories",
				"enum": [
					0,
					1,
					2,
					10,
					11,
					12
				],
				"type": "number"
			},
			"FileData": {
				"properties": {
					"id": {
						"description": "The database id of the file data",
						"format": "bigint"
					},
					"uid": {
						"type": "string"
					},
					"createdBy": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"filePath": {
						"type": "string",
						"nullable": true
					},
					"hash": {
						"type": "string",
						"nullable": true
					},
					"size": {
						"description": "The size of the file in bytes",
						"format": "bigint"
					},
					"keyHash": {
						"type": "string"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"id",
					"uid",
					"createdBy",
					"fileName",
					"filePath",
					"hash",
					"size",
					"keyHash",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Inode": {
				"properties": {
					"id": {
						"description": "The database id of the inode",
						"format": "bigint"
					},
					"mnemonic": {
						"type": "string"
					},
					"type": {
						"$ref": "#/components/schemas/InodeType"
					},
					"name": {
						"type": "string"
					},
					"tag": {
						"type": "string",
						"nullable": true
					},
					"data": {
						"allOf": [
							{
								"$ref": "#/components/schemas/FileData"
							}
						],
						"nullable": true
					},
					"parentId": {},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"id",
					"mnemonic",
					"type",
					"name",
					"tag",
					"parentId",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"File": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Inode"
					},
					{
						"properties": {
							"data": {
								"$ref": "#/components/schemas/FileData"
							}
						},
						"required": [
							"data"
						],
						"type": "object"
					}
				]
			},
			"Mnemonic": {
				"type": "string",
				"example": "happy_jane",
				"description": "mnemonics are human readable unique identifiers for datasets\nmnemonics have the form <random adjective>_<random first name>",
				"pattern": "^[a-z_]+$"
			},
			"UploadStartBody": {
				"properties": {
					"fileName": {
						"type": "string",
						"description": "The name of the file to upload"
					},
					"directory": {
						"$ref": "#/components/schemas/Mnemonic",
						"description": "The mnemonic of the directory to upload the file to"
					},
					"filePath": {
						"type": "string",
						"description": "The original path of the file"
					},
					"size": {
						"type": "integer",
						"format": "int32",
						"description": "The size of the file in bytes"
					},
					"tag": {
						"type": "string",
						"description": "A custom searchable tag for the file"
					}
				},
				"required": [
					"fileName"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Chunk": {
				"properties": {
					"id": {
						"description": "The database id of the chunk",
						"format": "bigint"
					},
					"dataId": {
						"description": "The id of the data the chunk belongs to",
						"format": "bigint"
					},
					"hash": {
						"type": "string",
						"description": "The SHA-256 hash of the unencrypted chunk data base64url encoded"
					},
					"iv": {
						"type": "string",
						"description": "The AES-256 initialization vector base64url encoded"
					},
					"start": {
						"description": "The start of the chunk as a byte position in the file",
						"format": "bigint"
					},
					"end": {
						"description": "The end of the chunk as a byte position in the file",
						"format": "bigint"
					},
					"crc": {
						"type": "string",
						"nullable": true,
						"description": "The CRC32 checksum of the encrypted chunk data base64url encoded"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"description": "chunk creation timestamp"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "chunk last update timestamp"
					}
				},
				"required": [
					"id",
					"dataId",
					"hash",
					"iv",
					"start",
					"end",
					"crc",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChunkData": {
				"allOf": [
					{
						"$ref": "#/components/schemas/FileData"
					},
					{
						"properties": {
							"chunks": {
								"items": {
									"$ref": "#/components/schemas/Chunk"
								},
								"type": "array"
							}
						},
						"required": [
							"chunks"
						],
						"type": "object"
					}
				]
			},
			"FileUpload": {
				"allOf": [
					{
						"$ref": "#/components/schemas/File"
					},
					{
						"properties": {
							"data": {
								"$ref": "#/components/schemas/ChunkData"
							}
						},
						"required": [
							"data"
						],
						"type": "object"
					}
				]
			},
			"User": {
				"description": "User is the type that represents a user in the system.",
				"properties": {
					"sub": {
						"type": "string",
						"description": "The subject of the user, a unique identifier",
						"example": "mhuttner"
					},
					"scopes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The scopes the user has",
						"example": [
							"dabih:api"
						]
					},
					"isAdmin": {
						"type": "boolean",
						"description": "Does the user have the dabih:admin scope"
					}
				},
				"required": [
					"sub",
					"scopes",
					"isAdmin"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Token": {
				"properties": {
					"id": {
						"description": "The id of the token",
						"format": "bigint"
					},
					"value": {
						"type": "string"
					},
					"sub": {
						"type": "string"
					},
					"scope": {
						"type": "string"
					},
					"exp": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"id",
					"value",
					"sub",
					"scope",
					"exp",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TokenResponse": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Token"
					},
					{
						"properties": {
							"expired": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"type": "boolean",
										"enum": [
											false
										]
									}
								],
								"description": "false if the token has not expired,\notherwise a string describing how long ago the token expired"
							},
							"scopes": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"description": "The array of scopes the token has"
							}
						},
						"required": [
							"expired",
							"scopes"
						],
						"type": "object"
					}
				]
			},
			"TokenAddBody": {
				"properties": {
					"scopes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The array of scopes the token should have"
					},
					"lifetime": {
						"type": "integer",
						"format": "int32",
						"nullable": true,
						"description": "The time in seconds the token should be valid for\nIf null the token will never expire"
					}
				},
				"required": [
					"scopes",
					"lifetime"
				],
				"type": "object",
				"additionalProperties": false
			},
			"JobStatus": {
				"type": "string",
				"enum": [
					"running",
					"complete",
					"failed"
				]
			},
			"Job": {
				"properties": {
					"jobId": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/JobStatus"
					}
				},
				"required": [
					"jobId",
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Key": {
				"properties": {
					"id": {
						"description": "The database id of the key",
						"format": "bigint"
					},
					"inodeId": {
						"description": "The inode id the key belongs to",
						"format": "bigint"
					},
					"hash": {
						"type": "string"
					},
					"key": {
						"type": "string"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"id",
					"inodeId",
					"hash",
					"key",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FileDownload": {
				"allOf": [
					{
						"$ref": "#/components/schemas/File"
					},
					{
						"properties": {
							"keys": {
								"items": {
									"$ref": "#/components/schemas/Key"
								},
								"type": "array"
							},
							"data": {
								"$ref": "#/components/schemas/ChunkData"
							}
						},
						"required": [
							"keys",
							"data"
						],
						"type": "object"
					}
				]
			},
			"FileKeys": {
				"allOf": [
					{
						"$ref": "#/components/schemas/File"
					},
					{
						"properties": {
							"keys": {
								"items": {
									"$ref": "#/components/schemas/Key"
								},
								"type": "array"
							}
						},
						"required": [
							"keys"
						],
						"type": "object"
					}
				]
			},
			"Permission": {
				"description": "The Permission type is used to represent the permissions a user has on a Inode.\nNONE: No permissions\nREAD: user may only read the file or directory\nWRITE: user can read, share, edit, and delete the file or directory",
				"enum": [
					0,
					1,
					2
				],
				"type": "number"
			},
			"Member": {
				"properties": {
					"id": {
						"description": "The database id of the member",
						"format": "bigint"
					},
					"sub": {
						"type": "string"
					},
					"inodeId": {
						"description": "The database id of the inode",
						"format": "bigint"
					},
					"permission": {
						"$ref": "#/components/schemas/Permission"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"id",
					"sub",
					"inodeId",
					"permission",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"InodeMembers": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Inode"
					},
					{
						"properties": {
							"members": {
								"items": {
									"$ref": "#/components/schemas/Member"
								},
								"type": "array"
							}
						},
						"required": [
							"members"
						],
						"type": "object"
					}
				]
			},
			"AESKey": {
				"type": "string",
				"description": "The AES-256 encryption key used to encrypt and decrypt datasets.\nbase64url encoded"
			},
			"FileDecryptionKey": {
				"properties": {
					"mnemonic": {
						"$ref": "#/components/schemas/Mnemonic"
					},
					"key": {
						"$ref": "#/components/schemas/AESKey"
					}
				},
				"required": [
					"mnemonic",
					"key"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MemberAddBody": {
				"properties": {
					"subs": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The users to add to the dataset"
					},
					"keys": {
						"items": {
							"$ref": "#/components/schemas/FileDecryptionKey"
						},
						"type": "array",
						"description": "The list of AES-256 keys required to decrypt all child datasets"
					}
				},
				"required": [
					"subs",
					"keys"
				],
				"type": "object",
				"additionalProperties": false
			},
			"InodeTree": {
				"allOf": [
					{
						"$ref": "#/components/schemas/InodeMembers"
					},
					{
						"properties": {
							"keys": {
								"items": {
									"$ref": "#/components/schemas/Key"
								},
								"type": "array"
							},
							"children": {
								"items": {
									"$ref": "#/components/schemas/InodeTree"
								},
								"type": "array"
							}
						},
						"required": [
							"keys"
						],
						"type": "object"
					}
				]
			},
			"MoveInodeBody": {
				"properties": {
					"mnemonic": {
						"$ref": "#/components/schemas/Mnemonic",
						"description": "The mnemonic of the inode to move"
					},
					"parent": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Mnemonic"
							}
						],
						"nullable": true,
						"description": "Optional: The mnemonic of the new parent directory"
					},
					"keys": {
						"items": {
							"$ref": "#/components/schemas/FileDecryptionKey"
						},
						"type": "array",
						"description": "The list of AES-256 keys required to decrypt all child datasets"
					},
					"name": {
						"type": "string",
						"description": "Optional: The new name of the inode"
					},
					"tag": {
						"type": "string",
						"description": "Optional: The new tag of the inode"
					}
				},
				"required": [
					"mnemonic"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ListResponse": {
				"properties": {
					"parents": {
						"items": {
							"$ref": "#/components/schemas/InodeMembers"
						},
						"type": "array",
						"description": "The list of parent directories"
					},
					"children": {
						"items": {
							"$ref": "#/components/schemas/InodeMembers"
						},
						"type": "array",
						"description": "The list of inodes in the directory"
					}
				},
				"required": [
					"parents",
					"children"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Directory": {
				"properties": {
					"mnemonic": {
						"$ref": "#/components/schemas/Mnemonic"
					},
					"name": {
						"type": "string"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"mnemonic",
					"name",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AddDirectoryBody": {
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the directory"
					},
					"parent": {
						"$ref": "#/components/schemas/Mnemonic",
						"description": "The mnemonic of the parent directory"
					},
					"tag": {
						"type": "string",
						"description": "A custom searchable tag for the directory"
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"InodeSearchBody": {
				"properties": {
					"query": {
						"type": "string"
					}
				},
				"required": [
					"query"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"api_key": {
				"type": "http",
				"name": "Authorization",
				"scheme": "bearer"
			},
			"jwt": {
				"type": "oauth2",
				"flows": {
					"authorizationCode": {
						"scopes": {
							"dabih:admin": "Allow the user to perform admin actions in dabih",
							"dabih:api": "Allow access to the dataset API",
							"dabih:upload": "Allow the user to upload files"
						}
					}
				}
			}
		}
	},
	"info": {
		"title": "dabih-api",
		"version": "0.1.0",
		"license": {
			"name": "MIT"
		},
		"contact": {
			"name": "Michael Huttner"
		}
	},
	"servers": [
		{
			"url": "/api/v1"
		}
	],
	"paths": {
		"/healthy": {
			"get": {
				"operationId": "healthy",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"healthy": {
											"type": "boolean"
										}
									},
									"required": [
										"healthy"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Util"
				],
				"security": [],
				"parameters": []
			}
		},
		"/info": {
			"get": {
				"operationId": "info",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DabihInfo"
								}
							}
						}
					}
				},
				"tags": [
					"Util"
				],
				"security": [],
				"parameters": []
			}
		},
		"/user/add": {
			"post": {
				"operationId": "addUser",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							}
						}
					}
				},
				"tags": [
					"User"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserAddBody"
							}
						}
					}
				}
			}
		},
		"/user/me": {
			"get": {
				"operationId": "me",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/UserResponse"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"User"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": []
			}
		},
		"/user/find": {
			"post": {
				"operationId": "findUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/UserResponse"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"User"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"sub": {
										"type": "string"
									}
								},
								"required": [
									"sub"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/user/list": {
			"get": {
				"operationId": "listUsers",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/UserResponse"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"User"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": []
			}
		},
		"/user/remove": {
			"post": {
				"operationId": "removeUser",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"User"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"sub": {
										"type": "string"
									}
								},
								"required": [
									"sub"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/user/key/add": {
			"post": {
				"operationId": "addKey",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PublicKey"
								}
							}
						}
					}
				},
				"tags": [
					"User"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/KeyAddBody"
							}
						}
					}
				}
			}
		},
		"/user/key/enable": {
			"post": {
				"operationId": "enableKey",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PublicKey"
								}
							}
						}
					}
				},
				"tags": [
					"User"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/KeyEnableBody"
							}
						}
					}
				}
			}
		},
		"/user/key/remove": {
			"post": {
				"operationId": "removeKey",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"User"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/KeyRemoveBody"
							}
						}
					}
				}
			}
		},
		"/upload/start": {
			"post": {
				"operationId": "startUpload",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/File"
								}
							}
						}
					}
				},
				"tags": [
					"Upload"
				],
				"security": [
					{
						"jwt": [
							"dabih:upload"
						]
					},
					{
						"api_key": [
							"dabih:upload"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UploadStartBody"
							}
						}
					}
				}
			}
		},
		"/upload/{mnemonic}/cancel": {
			"post": {
				"operationId": "cancelUpload",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Upload"
				],
				"security": [
					{
						"jwt": [
							"dabih:upload"
						]
					},
					{
						"api_key": [
							"dabih:upload"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "mnemonic",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Mnemonic"
						}
					}
				]
			}
		},
		"/upload/{mnemonic}/finish": {
			"post": {
				"operationId": "finishUpload",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/File"
								}
							}
						}
					}
				},
				"tags": [
					"Upload"
				],
				"security": [
					{
						"jwt": [
							"dabih:upload"
						]
					},
					{
						"api_key": [
							"dabih:upload"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "mnemonic",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Mnemonic"
						}
					}
				]
			}
		},
		"/upload/unfinished": {
			"get": {
				"operationId": "unfinishedUploads",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/FileUpload"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Upload"
				],
				"security": [
					{
						"jwt": [
							"dabih:upload"
						]
					},
					{
						"api_key": [
							"dabih:upload"
						]
					}
				],
				"parameters": []
			}
		},
		"/token/info": {
			"get": {
				"operationId": "tokenInfo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					}
				},
				"tags": [
					"Token"
				],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/token/add": {
			"post": {
				"operationId": "addToken",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TokenResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Token"
				],
				"security": [
					{
						"jwt": [
							"dabih:api"
						]
					},
					{
						"api_key": [
							"dabih:api"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TokenAddBody"
							}
						}
					}
				}
			}
		},
		"/token/list": {
			"get": {
				"operationId": "listTokens",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/TokenResponse"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Token"
				],
				"security": [
					{
						"jwt": [
							"dabih:api"
						]
					},
					{
						"api_key": [
							"dabih:api"
						]
					}
				],
				"parameters": []
			}
		},
		"/token/remove": {
			"post": {
				"operationId": "removeToken",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Token"
				],
				"security": [
					{
						"jwt": [
							"dabih:api"
						]
					},
					{
						"api_key": [
							"dabih:api"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"tokenId": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"tokenId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/job/list": {
			"get": {
				"operationId": "listJobs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Job"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "List all jobs",
				"tags": [
					"Job"
				],
				"security": [
					{
						"api_key": [
							"dabih:admin"
						]
					},
					{
						"jwt": [
							"dabih:admin"
						]
					}
				],
				"parameters": []
			}
		},
		"/fs/{mnemonic}/file": {
			"get": {
				"operationId": "fileInfo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FileDownload"
								}
							}
						}
					}
				},
				"description": "Get all the file information required to download a single file",
				"tags": [
					"Filesystem"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "mnemonic",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Mnemonic"
						}
					}
				]
			}
		},
		"/fs/{mnemonic}/file/list": {
			"get": {
				"operationId": "listFiles",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/FileKeys"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Recursively list all files in a directory",
				"tags": [
					"Filesystem"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "mnemonic",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Mnemonic"
						}
					}
				]
			}
		},
		"/fs/{mnemonic}/parent/list": {
			"get": {
				"operationId": "listParents",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/InodeMembers"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Filesystem"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "mnemonic",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Mnemonic"
						}
					}
				]
			}
		},
		"/fs/{mnemonic}/member/add": {
			"post": {
				"operationId": "addMembers",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Filesystem"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "mnemonic",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Mnemonic"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/MemberAddBody"
							}
						}
					}
				}
			}
		},
		"/fs/{mnemonic}/duplicate": {
			"post": {
				"operationId": "duplicateInode",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Inode"
								}
							}
						}
					}
				},
				"tags": [
					"Filesystem"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "mnemonic",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Mnemonic"
						}
					}
				]
			}
		},
		"/fs/{mnemonic}/remove": {
			"post": {
				"operationId": "removeInode",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Filesystem"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "mnemonic",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Mnemonic"
						}
					}
				]
			}
		},
		"/fs/{mnemonic}/tree": {
			"get": {
				"operationId": "inodeTree",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InodeTree"
								}
							}
						}
					}
				},
				"tags": [
					"Filesystem"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "mnemonic",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Mnemonic"
						}
					}
				]
			}
		},
		"/fs/move": {
			"post": {
				"operationId": "moveInode",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Filesystem"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/MoveInodeBody"
							}
						}
					}
				}
			}
		},
		"/fs/list": {
			"get": {
				"operationId": "listHome",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ListResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Filesystem"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": []
			}
		},
		"/fs/{mnemonic}/list": {
			"get": {
				"operationId": "listInodes",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ListResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Filesystem"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "mnemonic",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Mnemonic"
						}
					}
				]
			}
		},
		"/fs/directory/add": {
			"post": {
				"operationId": "addDirectory",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Directory"
								}
							}
						}
					}
				},
				"tags": [
					"Filesystem"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AddDirectoryBody"
							}
						}
					}
				}
			}
		},
		"/fs/search": {
			"post": {
				"operationId": "searchFs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"jobId": {
											"type": "string"
										}
									},
									"required": [
										"jobId"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Filesystem"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InodeSearchBody"
							}
						}
					}
				}
			}
		},
		"/fs/search/{jobId}": {
			"post": {
				"operationId": "searchResults",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Filesystem"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "jobId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/download/{mnemonic}/decrypt": {
			"post": {
				"operationId": "decryptDataset",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TokenResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Download"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "mnemonic",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Mnemonic"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"key": {
										"$ref": "#/components/schemas/AESKey"
									}
								},
								"required": [
									"key"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/download": {
			"get": {
				"operationId": "downloadDataset",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string",
									"format": "byte"
								}
							}
						}
					}
				},
				"tags": [
					"Download"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": []
			}
		},
		"/download/{uid}/chunk/{hash}": {
			"get": {
				"operationId": "downloadChunk",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/octet-stream": {
								"schema": {
									"type": "string",
									"format": "byte"
								}
							}
						}
					}
				},
				"tags": [
					"Download"
				],
				"security": [
					{
						"api_key": [
							"dabih:api"
						]
					},
					{
						"jwt": [
							"dabih:api"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "uid",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "hash",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/upload/{mnemonic}/chunk": {
			"put": {
				"operationId": "chunkUpload",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Chunk"
								}
							}
						}
					}
				},
				"tags": [
					"Upload"
				],
				"security": [
					{
						"jwt": [
							"dabih:upload"
						]
					},
					{
						"api_key": [
							"dabih:upload"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "mnemonic",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Mnemonic"
						}
					},
					{
						"description": "The range of bytes in the chunk\nIt should be in the format `bytes {start}-{end}/{size?}`",
						"in": "header",
						"name": "content-range",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The SHA-256 hash of the chunk data encoded in base64url\nIt should be in the format `sha-256={hash}`",
						"in": "header",
						"name": "digest",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"chunk": {
										"type": "string",
										"format": "binary"
									}
								}
							}
						}
					}
				}
			}
		}
	}
}