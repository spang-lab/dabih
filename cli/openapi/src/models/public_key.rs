/*
 * dabih-api
 *
 * Dabih API Server
 *
 * The version of the OpenAPI document: 2.1.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PublicKey {
    /// The database id of the public key
    #[serde(rename = "id", deserialize_with = "Option::deserialize")]
    pub id: Option<serde_json::Value>,
    /// The user id the key belongs to
    #[serde(rename = "userId", deserialize_with = "Option::deserialize")]
    pub user_id: Option<serde_json::Value>,
    #[serde(rename = "hash")]
    pub hash: String,
    #[serde(rename = "data")]
    pub data: String,
    #[serde(rename = "isRootKey")]
    pub is_root_key: bool,
    #[serde(rename = "enabled", deserialize_with = "Option::deserialize")]
    pub enabled: Option<String>,
    #[serde(rename = "enabledBy", deserialize_with = "Option::deserialize")]
    pub enabled_by: Option<String>,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
}

impl PublicKey {
    pub fn new(id: Option<serde_json::Value>, user_id: Option<serde_json::Value>, hash: String, data: String, is_root_key: bool, enabled: Option<String>, enabled_by: Option<String>, created_at: String, updated_at: String) -> PublicKey {
        PublicKey {
            id,
            user_id,
            hash,
            data,
            is_root_key,
            enabled,
            enabled_by,
            created_at,
            updated_at,
        }
    }
}

