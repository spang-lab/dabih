/*
 * dabih-api
 *
 * Dabih API Server
 *
 * The version of the OpenAPI document: 2.1.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Chunk {
    /// The database id of the chunk
    #[serde(rename = "id")]
    pub id: String,
    /// The id of the data the chunk belongs to
    #[serde(rename = "dataId")]
    pub data_id: String,
    /// The SHA-256 hash of the unencrypted chunk data base64url encoded
    #[serde(rename = "hash")]
    pub hash: String,
    /// The AES-256 initialization vector base64url encoded
    #[serde(rename = "iv")]
    pub iv: String,
    /// The start of the chunk as a byte position in the file
    #[serde(rename = "start")]
    pub start: String,
    /// The end of the chunk as a byte position in the file
    #[serde(rename = "end")]
    pub end: String,
    /// The CRC32 checksum of the encrypted chunk data base64url encoded
    #[serde(rename = "crc", deserialize_with = "Option::deserialize")]
    pub crc: Option<String>,
    /// chunk creation timestamp
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// chunk last update timestamp
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
}

impl Chunk {
    pub fn new(id: String, data_id: String, hash: String, iv: String, start: String, end: String, crc: Option<String>, created_at: String, updated_at: String) -> Chunk {
        Chunk {
            id,
            data_id,
            hash,
            iv,
            start,
            end,
            crc,
            created_at,
            updated_at,
        }
    }
}

