/*
 * dabih-api
 *
 * Dabih API Server
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TokenResponse {
    /// The id of the token
    #[serde(rename = "id", deserialize_with = "Option::deserialize")]
    pub id: Option<serde_json::Value>,
    #[serde(rename = "value")]
    pub value: String,
    #[serde(rename = "sub")]
    pub sub: String,
    #[serde(rename = "scope")]
    pub scope: String,
    #[serde(rename = "exp", deserialize_with = "Option::deserialize")]
    pub exp: Option<String>,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    #[serde(rename = "expired")]
    pub expired: Box<models::TokenResponseAllOfExpired>,
    /// The array of scopes the token has
    #[serde(rename = "scopes")]
    pub scopes: Vec<String>,
}

impl TokenResponse {
    pub fn new(id: Option<serde_json::Value>, value: String, sub: String, scope: String, exp: Option<String>, created_at: String, updated_at: String, expired: models::TokenResponseAllOfExpired, scopes: Vec<String>) -> TokenResponse {
        TokenResponse {
            id,
            value,
            sub,
            scope,
            exp,
            created_at,
            updated_at,
            expired: Box::new(expired),
            scopes,
        }
    }
}

