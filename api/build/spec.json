{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"Pick_Dataset.Exclude_keyofDataset.chunks__": {
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32",
						"description": "The database id of the dataset"
					},
					"mnemonic": {
						"type": "string",
						"description": "The mnemonic of the dataset"
					},
					"fileName": {
						"type": "string",
						"description": "The name of the file the dataset was created from"
					},
					"createdBy": {
						"type": "string",
						"description": "The user that uploaded the dataset"
					},
					"keyHash": {
						"type": "string",
						"description": "The hash of the AES-256 encryption key"
					},
					"name": {
						"type": "string",
						"description": "A custom non unique name of the dataset"
					},
					"path": {
						"type": "string",
						"description": "The original path of the dataset"
					},
					"hash": {
						"type": "string",
						"description": "The hash of the entire dataset"
					},
					"size": {
						"type": "integer",
						"format": "int32",
						"description": "The size of the dataset in bytes"
					}
				},
				"required": [
					"id",
					"mnemonic",
					"fileName",
					"createdBy",
					"keyHash",
					"name",
					"path",
					"hash",
					"size"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Dataset.chunks_": {
				"$ref": "#/components/schemas/Pick_Dataset.Exclude_keyofDataset.chunks__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"UploadStartResponse": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Omit_Dataset.chunks_"
					},
					{
						"properties": {
							"duplicate": {
								"type": "string",
								"description": "The hash of the duplicate dataset or null if there is no duplicate"
							}
						},
						"type": "object"
					}
				]
			},
			"Pick_Dataset.fileName-or-size-or-name-or-path_": {
				"properties": {
					"fileName": {
						"type": "string",
						"description": "The name of the file the dataset was created from"
					},
					"name": {
						"type": "string",
						"description": "A custom non unique name of the dataset"
					},
					"path": {
						"type": "string",
						"description": "The original path of the dataset"
					},
					"size": {
						"type": "integer",
						"format": "int32",
						"description": "The size of the dataset in bytes"
					}
				},
				"required": [
					"fileName",
					"name",
					"path",
					"size"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"UploadStartBody": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Pick_Dataset.fileName-or-size-or-name-or-path_"
					},
					{
						"properties": {
							"chunkHash": {
								"type": "string",
								"description": "The hash of the first 2MiB chunk of the file"
							}
						},
						"required": [
							"chunkHash"
						],
						"type": "object"
					}
				]
			},
			"User": {
				"properties": {
					"sub": {
						"type": "string"
					},
					"scopes": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"isAdmin": {
						"type": "boolean"
					}
				},
				"required": [
					"sub",
					"scopes",
					"isAdmin"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Token": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"value": {
						"type": "string"
					},
					"sub": {
						"type": "string"
					},
					"scope": {
						"type": "string"
					},
					"exp": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"id",
					"value",
					"sub",
					"scope",
					"exp",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TokenResponse": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Token"
					},
					{
						"properties": {
							"expired": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"type": "boolean",
										"enum": [
											false
										]
									}
								],
								"description": "false if the token has not expired,\notherwise a string describing how long ago the token expired"
							},
							"scopes": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"description": "The array of scopes the token has"
							}
						},
						"required": [
							"expired",
							"scopes"
						],
						"type": "object"
					}
				]
			},
			"TokenAddBody": {
				"properties": {
					"scopes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The array of scopes the token should have"
					},
					"lifetime": {
						"type": "integer",
						"format": "int32",
						"nullable": true,
						"description": "The time in seconds the token should be valid for\nIf null the token will never expire"
					}
				},
				"required": [
					"scopes",
					"lifetime"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PublicKey": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"userId": {
						"type": "number",
						"format": "double"
					},
					"hash": {
						"type": "string"
					},
					"data": {
						"type": "string"
					},
					"isRootKey": {
						"type": "boolean"
					},
					"enabled": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"enabledBy": {
						"type": "string",
						"nullable": true
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					}
				},
				"required": [
					"id",
					"userId",
					"hash",
					"data",
					"isRootKey",
					"enabled",
					"enabledBy",
					"createdAt",
					"updatedAt",
					"deletedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"crypto.JsonWebKey": {
				"properties": {
					"crv": {
						"type": "string"
					},
					"d": {
						"type": "string"
					},
					"dp": {
						"type": "string"
					},
					"dq": {
						"type": "string"
					},
					"e": {
						"type": "string"
					},
					"k": {
						"type": "string"
					},
					"kty": {
						"type": "string"
					},
					"n": {
						"type": "string"
					},
					"p": {
						"type": "string"
					},
					"q": {
						"type": "string"
					},
					"qi": {
						"type": "string"
					},
					"x": {
						"type": "string"
					},
					"y": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": {}
			},
			"KeyAddBody": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/crypto.JsonWebKey",
						"description": "The public key in PEM format"
					},
					"isRootKey": {
						"type": "boolean",
						"description": "If true the key is a root key, used to decrypt all datasets"
					},
					"user": {
						"properties": {
							"email": {
								"type": "string"
							},
							"name": {
								"type": "string"
							}
						},
						"required": [
							"email",
							"name"
						],
						"type": "object",
						"description": "The user info of the key owner"
					}
				},
				"required": [
					"data",
					"isRootKey",
					"user"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"api_key": {
				"type": "http",
				"name": "Authorization",
				"scheme": "bearer"
			},
			"jwt": {
				"type": "oauth2",
				"flows": {
					"authorizationCode": {
						"scopes": {
							"admin": "Allow the user to perfmorm all actions in dabih",
							"dataset": "Allow access to the dataset API",
							"key": "Allow the user to add public keys",
							"token": "Allow the user to generate access tokens",
							"upload": "Allow the user to upload files"
						}
					}
				}
			}
		}
	},
	"info": {
		"title": "dabih-api",
		"version": "0.1.0",
		"license": {
			"name": "MIT"
		},
		"contact": {
			"name": "Michael Huttner"
		}
	},
	"servers": [
		{
			"url": "/api/v1"
		}
	],
	"paths": {
		"/upload/start": {
			"post": {
				"operationId": "Start",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UploadStartResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Upload"
				],
				"security": [
					{
						"jwt": [
							"upload"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UploadStartBody"
							}
						}
					}
				}
			}
		},
		"/token/info": {
			"get": {
				"operationId": "tokenInfo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					}
				},
				"tags": [
					"Token"
				],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/token/add": {
			"post": {
				"operationId": "addToken",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TokenResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Token"
				],
				"security": [
					{
						"jwt": [
							"token"
						]
					},
					{
						"api_key": [
							"token"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TokenAddBody"
							}
						}
					}
				}
			}
		},
		"/token/list": {
			"get": {
				"operationId": "listTokens",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/TokenResponse"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Token"
				],
				"security": [
					{
						"jwt": [
							"token"
						]
					},
					{
						"api_key": [
							"token"
						]
					}
				],
				"parameters": []
			}
		},
		"/token/{tokenId}/remove": {
			"post": {
				"operationId": "removeToken",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Token"
				],
				"security": [
					{
						"jwt": [
							"token"
						]
					},
					{
						"api_key": [
							"token"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "tokenId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/key/add": {
			"post": {
				"operationId": "addKey",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PublicKey"
								}
							}
						}
					}
				},
				"tags": [
					"Public Key"
				],
				"security": [
					{
						"api_key": [
							"key"
						]
					},
					{
						"jwt": [
							"key"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/KeyAddBody"
							}
						}
					}
				}
			}
		},
		"/key/list": {
			"get": {
				"operationId": "listKeys",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/PublicKey"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Public Key"
				],
				"security": [
					{
						"api_key": [
							"key"
						]
					},
					{
						"jwt": [
							"key"
						]
					}
				],
				"parameters": []
			}
		},
		"/key/{keyId}/remove": {
			"post": {
				"operationId": "removeKey",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Public Key"
				],
				"security": [
					{
						"api_key": [
							"key"
						]
					},
					{
						"jwt": [
							"key"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "keyId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/upload/chunk": {
			"put": {
				"operationId": "Chunk",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Upload"
				],
				"security": [
					{
						"jwt": [
							"upload"
						]
					}
				],
				"consumes": [
					"multipart/form-data"
				],
				"parameters": [
					{
						"in": "formData",
						"name": "file",
						"type": "file",
						"required": true
					}
				]
			}
		}
	}
}