/*
 * dabih-api
 *
 * Dabih API Server
 *
 * The version of the OpenAPI document: 2.0.8
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChunkData {
    /// The database id of the file data
    #[serde(rename = "id", deserialize_with = "Option::deserialize")]
    pub id: Option<serde_json::Value>,
    #[serde(rename = "uid")]
    pub uid: String,
    #[serde(rename = "createdBy")]
    pub created_by: String,
    #[serde(rename = "fileName")]
    pub file_name: String,
    #[serde(rename = "filePath", deserialize_with = "Option::deserialize")]
    pub file_path: Option<String>,
    #[serde(rename = "hash", deserialize_with = "Option::deserialize")]
    pub hash: Option<String>,
    /// The size of the file in bytes
    #[serde(rename = "size", deserialize_with = "Option::deserialize")]
    pub size: Option<serde_json::Value>,
    #[serde(rename = "keyHash")]
    pub key_hash: String,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    #[serde(rename = "chunks")]
    pub chunks: Vec<models::Chunk>,
}

impl ChunkData {
    pub fn new(id: Option<serde_json::Value>, uid: String, created_by: String, file_name: String, file_path: Option<String>, hash: Option<String>, size: Option<serde_json::Value>, key_hash: String, created_at: String, updated_at: String, chunks: Vec<models::Chunk>) -> ChunkData {
        ChunkData {
            id,
            uid,
            created_by,
            file_name,
            file_path,
            hash,
            size,
            key_hash,
            created_at,
            updated_at,
            chunks,
        }
    }
}

